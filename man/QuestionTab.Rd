% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QuestionTab.R
\name{QuestionTab}
\alias{QuestionTab}
\title{QuestionTab class definition}
\description{
QuestionTab class definition

QuestionTab class definition
}
\details{
Instances are tabs of the questionnaire.
This is a wrapper over any ui and server that handles switching to previous/next tab if relevant
(if the next_tab/previous_tab argument is NULL there is no button and corresponding server logic).
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tab_name}}{name of the tab}

\item{\code{tab_ui}}{specific UI function, may take any number of arguments}

\item{\code{tab_ui_foot}}{specific UI function to be used in footer (without arguments)}

\item{\code{tab_server}}{specific server function}

\item{\code{tab_number}}{number assigned automatically based on 'ordered_tabs' vector of names}

\item{\code{previous_tab}}{name of previous tab (optional)}

\item{\code{next_tab}}{name of previous tab (optional)}

\item{\code{id}}{component id in shiny, assigned automatically based on tab number}

\item{\code{add_footer}}{bool argument whether to include the standard footer}

\item{\code{add_header}}{bool argument whether to include the standard header}

\item{\code{exposure}}{optional table of exposures, if present a grid of inputs will be prepared}

\item{\code{type}}{type of institution (to group the inputs from all tabs)}

\item{\code{subtype}}{subtype of tab within a type of institution (to group the inputs from all tabs)}

\item{\code{ui_settings}}{optional list of parameters to pass to ui function}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{QuestionTab$new()}}
\item \href{#method-server}{\code{QuestionTab$server()}}
\item \href{#method-ui}{\code{QuestionTab$ui()}}
\item \href{#method-clone}{\code{QuestionTab$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
the constructor fills the slots with values given
it also automatically gets ui, server and foot
from the relevant functions (or makes it empty if the function does not exist)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QuestionTab$new(
  tab_name,
  previous_tab,
  next_tab,
  add_header = TRUE,
  add_footer = TRUE,
  exposure = NULL,
  type = NULL,
  subtype = NULL,
  ui_settings = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tab_name}}{name of the tab}

\item{\code{previous_tab}}{name of the previous tab}

\item{\code{next_tab}}{name of the next tab}

\item{\code{add_header}}{whether to add a standard header}

\item{\code{add_footer}}{whether to add a standard footer}

\item{\code{exposure}}{(optional) table of exposure to construct grid of inputs}

\item{\code{type}}{type of issuers for which the inputs are applicable}

\item{\code{subtype}}{unique reference of tab within a type of issuers}

\item{\code{ui_settings}}{(optional) list of arguments to pass to tab_ui}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-server"></a>}}
\subsection{Method \code{server()}}{
Tab server function that combines:
\enumerate{
\item server side of exposure input table (if given in the constructor)
\item any other server tab_server (if given in the constructor)
\item possibility of switch to previous/next tab (if applicable), using 'switch_page' function.
additionally, a boolean function may be passed to allow going next only conditionally
(by default the condition is always true)
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QuestionTab$server(
  input,
  output,
  session,
  switch_page,
  allow_next = function() {     TRUE }
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{regular shiny parameter}

\item{\code{output}}{regular shiny parameter}

\item{\code{session}}{regular shiny parameter}

\item{\code{switch_page}}{function to be passed that changes the active tab
(used in prev/next buttons)}

\item{\code{allow_next}}{(optional) additional condition to be checked before going to next tab}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui"></a>}}
\subsection{Method \code{ui()}}{
tab UI function that combines:
0. a common header (unless add_header=FALSE)
\enumerate{
\item exposure input table (if exposure table given in the constructore)
\item any other tab_UI (if given in the constructor)
\item buttons that switch to previous/next tab (if applicable)
\item a tab-specific text
\item a common footer (unless add_footer=FALSE)
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QuestionTab$ui()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QuestionTab$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
